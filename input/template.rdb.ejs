@@@FILE:[test/databasify.sql]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const tagPrefixes = ['domain','transition','bitemporal']
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions, tagPrefixes)

dbJson.tables.forEach(table => {

  const domain = codifier.codifyText(table.domain, codifyOptions, true)
  const bitemporal = (table.bitemporal === "true")
  const transition = (table.transition === "true")

%>
/* ###################################################### */

CREATE TABLE dbo.[<%- domain ? domain.concat("_") : null %><%- table.baseName %>] ( c
  [Policy_<%- table.baseName %>_PK] BIGINT IDENTITY(1,1) NOT NULL,
  [Policy_<%- table.baseName %>_NK] [varchar](200) NOT NULL,
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- " ".concat(column.name) 
%><%- " ".concat(column.dataType) 
%><%- column.required ? " NOT NULL" : null %>
<% // javascript
  
  })

  const pkColumns = table.columns.filter(c => c.primary === true).map(c => c.name) ?? []
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>,[Business_Effective_Begin_Datetime] [datetime2](7) NULL,
[Business_Effective_End_Datetime] [datetime2](7) NULL,
[Record_Valid_Begin_Datetime] [datetime2](7) NULL,
[Record_Valid_End_Datetime] [datetime2](7) NULL,
[Entered_Datetime] [datetime2](7) NULL,
[Updated_Datetime] [datetime2](7) NULL,
[Batch_ID] [varchar](200) NULL,
[Invalidated_Batch_ID] [varchar](200) NULL,
[Intra_Batch_Loop_Sequence] [int] NULL,
[Generated_Record_Ind] [int] NULL,
[Change_HASH] [binary](32) NULL,
[Source_System_Code] [varchar](100) NULL
<%- // javascript
  pkColumns.length > 0 ?  ` 
  
  CONSTRAINT [Policy_${table.baseName}_PK] PRIMARY KEY CLUSTERED 
   ( 
   ${ pkColumns.join(",") } ASC )
  WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY] 
  \n` : null
%>;
<% // javascript
  if(grainColumns.length > 0) {
%>
CREATE UNIQUE INDEX UX_<%- table.baseName -%>_GRAIN ON [Policy_<%= table.baseName %>] (
  <%- grainColumns.join(",") %>
);
<% // javascript
  }
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>