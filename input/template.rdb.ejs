@@@FILE:[test/databasify.sql]@@@
<% // javascript


const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {

  const tableName = codifier.codifyText(
        table.domain ? table.domain.concat("_", table.name) : table.name,
        codifyOptions
  )

  const pkColumName = tableName.concat("_", databaseOptions.primaryKeyDescriptor)
  const nkColumName = tableName.concat("_", databaseOptions.naturalKeyDescriptor)
  const grainColumns = table.columns
    .filter(c => c.grain === true)
    .map(c => c.name) ?? []

%>
/* ###################################################### */

CREATE TABLE dbo.[<%- tableName %>] (
  [<%- pkColumName %>] BIGINT IDENTITY(1,1) NOT NULL
, [<%- nkColumName %>] VARCHAR(200) NOT NULL
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%>,<%- ` [${column.name}]`
%><%-  ` ${column.dataType}`
%><%- column.required ? " NOT NULL" : null %>
<% // javascript

  })

%>, [BUSINESS_EFFECTIVE_BEGIN_DATETIME] DATETIME2(7) NULL
, [BUSINESS_EFFECTIVE_END_DATETIME] DATETIME2(7) NULL
, [RECORD_VALID_BEGIN_DATETIME] DATETIME2(7) NULL
, [RECORD_VALID_END_DATETIME] DATETIME2(7) NULL
, [ENTERED_DATETIME] DATETIME2(7) NULL
, [UPDATED_DATETIME] DATETIME2(7) NULL
, [BATCH_ID] VARCHAR(200) NULL
, [INVALIDATED_BATCH_ID] VARCHAR(200) NULL
, [INTRA_BATCH_LOOP_SEQUENCE] INT NULL
, [GENERATED_RECORD_IND] INT NULL
, [CHANGE_HASH] BINARY(32) NULL
, [SOURCE_SYSTEM_CODE] VARCHAR(100) NULL
, CONSTRAINT [PK_<%- tableName %>] PRIMARY KEY CLUSTERED ([<%- pkColumName %>] ASC)
 WITH (
  PAD_INDEX = OFF
, STATISTICS_NORECOMPUTE = OFF
, IGNORE_DUP_KEY = OFF
, ALLOW_ROW_LOCKS = ON
, ALLOW_PAGE_LOCKS = ON
) ON [PRIMARY]
);
<% }) 

  dbJson.tables.forEach(table => {
  const tableName = codifier.codifyText(
        table.domain ? table.domain.concat("_", table.name) : table.name,
        codifyOptions
  )
  const grainColumns = table.columns
    .filter(c => c.grain === true)
    .map(c => c.name) ?? []

  if(grainColumns.length > 0) {
%>
CREATE UNIQUE INDEX [UX_<%- tableName %>_GRAIN] ON [<%- tableName %>] (
  <%- `[${grainColumns.join("], [")}]` %>
);
<% // javascript
  }
  
  table.foreignKeys.forEach((column, columnIndex) => { %>
ALTER TABLE <%- tableName %> ADD CONSTRAINT FK_<%- tableName %>_<%- `${column.foreignColumnName}`%>
FOREIGN KEY (<%- `${column.foreignColumnName}`%>) REFERENCES <%-  `${column.referenceTableName}`%>(<%-  `${column.referenceColumnName}`%>);
<% // javascript
  })
})
function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>