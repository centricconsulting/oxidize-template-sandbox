@@@FILE:[test/databasify.sql]@@@
<% // javascript


const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

const codifyText = (text, excludeWrapper = false) => {
  return codifier.codifyText(text, codifyOptions, excludeWrapper)
}

dbJson.tables.forEach(table => {

  const domain = table.tagProperties?.domain
  const tableNameUnwrapped = codifyText(domain ? domain.concat("_", table.baseName) : table.baseName, true)
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>
/* ###################################################### */

CREATE TABLE dbo.[<%- tableNameUnwrapped %>] (
  [<%- tableNameUnwrapped.concat("_", databaseOptions.primaryKeyDescriptor) %>] BIGINT IDENTITY(1,1) NOT NULL
, [<%- tableNameUnwrapped.concat("_", databaseOptions.naturalKeyDescriptor) %>] [varchar](200) NOT NULL
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%>,<%- ` [${column.name}]`
%><%-  ` ${column.dataType}`
%><%- column.required ? " NOT NULL" : null %>
<% // javascript

  })

%>, [BUSINESS_EFFECTIVE_BEGIN_DATETIME] [DATETIME2](7) NULL
, [BUSINESS_EFFECTIVE_END_DATETIME] [DATETIME2](7) NULL
, [RECORD_VALID_BEGIN_DATETIME] [DATETIME2](7) NULL
, [RECORD_VALID_END_DATETIME] [DATETIME2](7) NULL
, [ENTERED_DATETIME] [DATETIME2](7) NULL
, [UPDATED_DATETIME] [DATETIME2](7) NULL
, [BATCH_ID] [VARCHAR](200) NULL
, [INVALIDATED_BATCH_ID] [VARCHAR](200) NULL
, [INTRA_BATCH_LOOP_SEQUENCE] [INT] NULL
, [GENERATED_RECORD_IND] [INT] NULL
, [CHANGE_HASH] [BINARY](32) NULL
, [SOURCE_SYSTEM_CODE] [VARCHAR](100) NULL
, CONSTRAINT [PK_<%- tableNameUnwrapped %>] PRIMARY KEY CLUSTERED ([<%- tableNameUnwrapped.concat("_", databaseOptions.primaryKeyDescriptor) %>] ASC)
) WITH (
  PAD_INDEX = OFF
, STATISTICS_NORECOMPUTE = OFF
, IGNORE_DUP_KEY = OFF
, ALLOW_ROW_LOCKS = ON
, ALLOW_PAGE_LOCKS = ON
) ON [PRIMARY]

<% // javascript
  if(grainColumns.length > 0) {
%>
CREATE UNIQUE INDEX [UX_<%- tableNameUnwrapped %>_GRAIN] ON [<%- tableNameUnwrapped %>] (
  <%- grainColumns.join(",") %>
);
<% // javascript
  }
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>