@@@FILE:[test/databasifyTransientEDWtab.sql]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {

  const tableName = codifier.codifyText(
      table.domain ? table.domain.concat("_", table.name) : table.name,
      codifyOptions
    )
  const bitemporal = (table.bitemporal === "true")
  const transition = (table.transition === "true")

  const pkColumName = tableName.concat("_", databaseOptions.primaryKeyDescriptor)
  const nkColumName = tableName.concat("_", databaseOptions.naturalKeyDescriptor)


%>
/* ###################################################### */
--Transient EDW table
/****** Object:  Table [dbo].[Transient_<%- tableName %>]    Script Date: 12/31/2021 8:51:04 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Transient_<%- tableName %>]( 
  [<%- nkColumName %>] <%-databaseOptions.keyDataType%> NULL,
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- " ".concat(column.name) 
%><%- " ".concat(column.dataType) 
%><%- column.required ? " NOT NULL" : null %>
<% // javascript
  
  })

  const pkColumns = table.columns.filter(c => c.primary === true).map(c => c.name) ?? []
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>,[BUSINESS_EFFECTIVE_BEGIN_DATETIME] [DATETIME2](7) NULL,
[BUSINESS_EFFECTIVE_END_DATETIME] [DATETIME2](7) NULL,
[RECORD_VALID_BEGIN_DATETIME] [DATETIME2](7) NULL,
[RECORD_VALID_END_DATETIME] [DATETIME2](7) NULL,
[ENTERED_DATETIME] [DATETIME2](7) NULL,
[UPDATED_DATETIME] [DATETIME2](7) NULL,
[BATCH_ID] [VARCHAR](200) NULL,
[INVALIDATED_BATCH_ID] [VARCHAR](200) NULL,
[INTRA_BATCH_LOOP_SEQUENCE] [INT] NULL,
[GENERATED_RECORD_IND] [INT] NULL,
[CHANGE_HASH] [BINARY](32) NULL,
[SOURCE_SYSTEM_CODE] [VARCHAR](100) NULL
) ON [PRIMARY]
GO

<% // javascript
  
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>