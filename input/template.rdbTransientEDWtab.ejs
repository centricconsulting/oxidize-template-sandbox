@@@FILE:[test/databasifyTransientEDWtab.sql]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {

%>
/* ###################################################### */
--Transient EDW table
/****** Object:  Table [dbo].[Transient_<%- table.baseName %>_<%- table.baseName %>]    Script Date: 12/31/2021 8:51:04 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Transient_Policy_<%- table.baseName %>]( 
  [Policy_<%- table.baseName %>_PK] BIGINT NOT NULL,
  [Policy_<%- table.baseName %>_NK] [varchar](200) NULL,
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- " ".concat(column.name) 
%><%- " ".concat(column.dataType) 
%><%- column.required ? " NOT NULL" : null %>
<% // javascript
  
  })

  const pkColumns = table.columns.filter(c => c.primary === true).map(c => c.name) ?? []
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>,[Business_Effective_Begin_Datetime] [datetime2](7) NULL,
[Business_Effective_End_Datetime] [datetime2](7) NULL,
[Record_Valid_Begin_Datetime] [datetime2](7) NULL,
[Record_Valid_End_Datetime] [datetime2](7) NULL,
[Entered_Datetime] [datetime2](7) NULL,
[Updated_Datetime] [datetime2](7) NULL,
[Batch_ID] [varchar](200) NULL,
[Invalidated_Batch_ID] [varchar](200) NULL,
[Intra_Batch_Loop_Sequence] [int] NULL,
[Generated_Record_Ind] [int] NULL,
[Change_HASH] [binary](32) NULL,
[Source_System_Code] [varchar](100) NULL
) ON [PRIMARY]
GO

<% // javascript
  
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>