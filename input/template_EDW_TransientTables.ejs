@@@FILE:[test/databasify.sql]@@@
<% // javascript


const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {
  const nkColumNamemod = table.name
  const tableName = codifier.codifyText(
        
        table.domain ? table.domain.concat("_", table.name) : table.name,
        codifyOptions
  )

  const pkColumName = tableName.concat("_", databaseOptions.primaryKeyDescriptor)
  const nkColumName = nkColumNamemod.concat("_", databaseOptions.naturalKeyDescriptor)

  const grainColumns = table.columns
    .filter(c => c.grain === true)
    .map(c => c.name) ?? []

%>
/* ###################################################### */

CREATE TABLE dbo.[Transient_<%- tableName %>] (
  [<%- nkColumName %>] VARCHAR(200) NOT NULL
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%>,<%- ` [${column.name}]`
%><%-  ` ${column.dataType}`
%><%- column.required ? " NOT NULL" : null %>
<% // javascript

  })

%> ,[BUSINESS_EFFECTIVE_BEGIN_DATETIME] [datetime2](7) NULL
 ,[BUSINESS_EFFECTIVE_END_DATETIME] [datetime2](7) NULL
 ,[RECORD_VALID_BEGIN_DATETIME] [datetime2](7) NULL
 ,[RECORD_VALID_END_DATETIME] [datetime2](7) NULL
 ,[ENTERED_DATETIME] [datetime2](7) NULL
 ,[UPDATED_DATETIME] [datetime2](7) NULL
 ,[PROCESS_BATCH_ID] [varchar](200) NULL
 ,[INVALIDATED_BATCH_LOOP_SEQUENCE] [varchar](100) NULL
 ,[INTRA_BATCH_LOOP_SEQUENCE] [varchar](100) NULL
 ,[GENERATED_RECORD_FLAG] [bit] NULL
 ,[CHANGE_HASH] [binary](32) NULL
 ,[SOURCE_SYSTEM_CODE] [varchar](100) NULL
)
GO
<% // javascript
  if(grainColumns.length > 0) {
%>
CREATE UNIQUE INDEX [UX_<%- tableName %>_GRAIN] ON [<%- tableName %>] (
  <%- `[${grainColumns.join("], [")}]` %>
);
<% // javascript
  }
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>