@@@FILE:[test/databasifyBiTemporalSP.sql]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {

  const tableName = codifier.codifyText(
      table.domain ? table.domain.concat("_", table.name) : table.name,
      codifyOptions
    )

  const bitemporal = (table.bitemporal === "true")
  const transition = (table.transition === "true")

%>
/****** Object:  StoredProcedure [dbo].[usp_LOAD_<%- tableName %>]    Script Date: 12/31/2021 8:58:41 PM ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--- Target BiTemporal SP

------------------------------------------------------------------------------------------
CREATE   PROCEDURE [dbo].[usp_LOAD_<%- tableName %>]
            @Batch_ID                         VARCHAR (200)
            ,@TransientRecordCount             INT           OUTPUT
            ,@TargetStartRecordCount           INT           OUTPUT
            ,@TargetEndRecordCount             INT           OUTPUT
            ,@TargetNewObjectCount             INT           OUTPUT
            ,@TargetExistingUpdatedObjectCount INT           OUTPUT
            ,@TargetTotalUpdatedObjectCount    INT           OUTPUT
            ,@TargetTotalUpdatedRecordCount    INT           OUTPUT
            ,@Success                          INT           = 0 OUTPUT
            ,@ErrorMessage                     VARCHAR(8000) = '' OUTPUT
AS
SET NOCOUNT ON ;
/***************************************************************************************************
Procedure:          [dbo].[LOAD_<%- tableName %>]
Autogenerated Date: 2021-11-24
Description:        This procedure is called by Informatica to apply bi-temporal change
                                                                        logic to <%- tableName %>.  It is used across multiple sources.
Call by:            Informatica Object Mapping(s)
Affected table(s):  [dbo].[TRANSIENT_<%- tableName %>]
                    [dbo].[<%- tableName %>]
In Parameter(s):        @Batch_ID - Passed in from Informatica Object Mapping.  
                                                                                                Inserted into [dbo].[<%- tableName %>]
Out Parameter(s):     @TransientRecordCount - Count of Records in [dbo].[TRANSIENT_<%- tableName %>] at START
                                                            @TargetStartRecordCount - Count of Records in [dbo].[<%- tableName %>] at START
                                                            @TargetEndRecordCount - Count of Records in [dbo].[<%- tableName %>] at END
                                                            @TargetNewObjectCount - Count of New Objects added to [dbo].[<%- tableName %>]
                                                            @TargetExistingUpdatedObjectCount - Count of Existing (not new) Objects updated in [dbo].[<%- tableName %>]
                                                            @TargetTotalUpdatedObjectCount - Count of ALL (New and Existing) Objects updated in [dbo].[<%- tableName %>]
                                                            @TargetTotalUpdatedRecordCount - Count of ALL (New and Existing) Records updated in [dbo].[<%- tableName %>]
                                                            @Success - Returns 0 for FAILURE and 1 for SUCCESS
                                                            @ErrorMessage - Varchar concatenation of error/warning messages

Usage:              EXEC @ReturnVal = [dbo].[LOAD_<%- tableName %>]
                                                                        @Batch_ID = @Batch_ID
                                                                        ,@TransientRecordCount = @TransientRecordCount OUTPUT
                                                                        ,@TargetStartRecordCount = @TargetStartRecordCount OUTPUT
                                                                        ,@TargetEndRecordCount = @TargetEndRecordCount OUTPUT
                                                                        ,@TargetNewObjectCount = @TargetNewObjectCount OUTPUT
                                                                        ,@TargetExistingUpdatedObjectCount = @TargetExistingUpdatedObjectCount OUTPUT
                                                                        ,@TargetTotalUpdatedObjectCount = @TargetTotalUpdatedObjectCount OUTPUT
                                                                        ,@TargetTotalUpdatedRecordCount = @TargetTotalUpdatedRecordCount OUTPUT
                                                                        ,@Success = @Success OUTPUT
                                                                        ,@ErrorMessage = @ErrorMessage OUTPUT ;.

*/
/***************************************************************************************************
Set declare and set some variables
***************************************************************************************************/
DECLARE
            @EOT                          DATE   = '12/31/9000'
            ,@BOT                          DATE   = '1/1/1900'
            ,@ROWCOUNT                     BIGINT
            ,@Updates_Row_count            BIGINT = 0
            ,@Updates_Has_Index            BIT    = 0
            ,@UpdatesDedupCnt              INT    = 0
            ,@Current_<%- tableName %>_PK BIGINT
            ,@IndexesCreated               BIT    = 0
            ,@RowNum                       INT    = 0 ;

SELECT
            @TransientRecordCount = 0
            ,@TargetStartRecordCount = 0
            ,@TargetEndRecordCount = 0
            ,@TargetNewObjectCount = 0
            ,@TargetExistingUpdatedObjectCount = 0
            ,@TargetTotalUpdatedObjectCount = 0
            ,@TargetTotalUpdatedRecordCount = 0
            ,@Success = 0
            ,@ErrorMessage = '' ;

SELECT 
             @TransientRecordCount = COUNT(1)
FROM [dbo].[TRANSIENT_<%- tableName %>]
OPTION( RECOMPILE ) ;

SELECT
            @Current_<%- tableName %>_PK = MAX([<%- tableName %>_PK])
            ,@TargetStartRecordCount = COUNT(1)
            ,@TargetExistingUpdatedObjectCount = COUNT(DISTINCT [<%- tableName %>_NK])
FROM [dbo].[<%- tableName %>]
OPTION( RECOMPILE ) ;


/***************************************************************************************************
Cleanup and Temp Table creation(for faster processing).  
The data changes are calculated and stored (as inserts - for faster processing) in TempDB.
INSERTS and UPDATES are pushed into the final table at the end 
***************************************************************************************************/
DROP TABLE IF EXISTS [#<%- tableName %>] ;
DROP TABLE IF EXISTS [#Updates] ;
DROP TABLE IF EXISTS [#Loop] ;
DROP TABLE IF EXISTS [#UpdatesDeduped] ;

CREATE TABLE [#UpdatesDeduped]
(
            [<%- tableName %>_PK]      BIGINT       NOT NULL
            ,[Invalidated_Batch_ID]      VARCHAR(100)
            ,[<%- tableName %>_NK]      VARCHAR(100) NOT NULL
            ,[Record_Valid_End_Datetime] DATETIME2(3)
) ;

CREATE TABLE [#Updates]
(
            [UpdatesRowId]              BIGINT       NOT NULL
            ,[<%- tableName %>_PK]      BIGINT       NOT NULL
            ,[<%- tableName %>_NK]      VARCHAR(100) NULL
            ,[Invalidated_Batch_ID]      VARCHAR(200) NULL
            ,[Record_Valid_End_Datetime] DATETIME2(3) NULL
) ;

/***************************************************************************************************
Load Working Table
            For all Objects that are potentially updated (Objects in [dbo].[TRANSIENT_<%- tableName %>])
            ,we bring the existing, and active data from [dbo].[<%- tableName %>] into TempDB(for faster processing)
***************************************************************************************************/
SELECT
            *
            ,CAST(NULL AS BIT) AS [To_Load]
INTO [#<%- tableName %>]
FROM [dbo].[<%- tableName %>] AS [e]
WHERE EXISTS ( 
            SELECT 1 
            FROM [dbo].[TRANSIENT_<%- tableName %>] AS [t] 
            WHERE [e].[<%- tableName %>_NK] = [t].[<%- tableName %>_NK] 
            ) 
            AND [e].[Record_Valid_End_Datetime] = @EOT
OPTION( RECOMPILE ) ;
/***************************************************************************************************
@MatchingExistingCnt is used to eliminate this table if there are no records(for faster processing)
***************************************************************************************************/
DECLARE @MatchingExistingCnt INT = SIGN(@@ROWCOUNT) ;

/***************************************************************************************************
Start the Loop(s) for multiple changes to an object within the Batch
***************************************************************************************************/
SELECT
            [k].[Intra_Batch_Loop_Sequence]
            ,[k].[Cnt]
            ,CAST(SUM([k].[Cnt]) OVER(ORDER BY [k].[Intra_Batch_Loop_Sequence]) * 100.0 / @TransientRecordCount AS NUMERIC(20, 2)) AS [Cumulative]
INTO [#Loop]
FROM( 
            SELECT 
                         [Intra_Batch_Loop_Sequence]
                        ,COUNT(1) AS [Cnt] 
            FROM [dbo].[TRANSIENT_<%- tableName %>] 
            GROUP BY [Intra_Batch_Loop_Sequence]
            ) AS [k]
OPTION( RECOMPILE ) ;

DECLARE @IntraLoop_cursor_Cnt INT = @@ROWCOUNT ;

            BEGIN TRY
                        DECLARE
                                    @Intra_Batch_Loop_Sequence INT
                                    ,@Cnt                       INT
                                    ,@Cumulative                NUMERIC(20, 2) ;

        DECLARE [Loop_cursor] CURSOR FAST_FORWARD FOR 
                        SELECT 
                                     [Intra_Batch_Loop_Sequence]
                                    ,[Cnt]
                                    ,[Cumulative] 
                        FROM [#Loop](NOLOCK)
                        ORDER BY [Intra_Batch_Loop_Sequence];

        OPEN [Loop_cursor] ;

        FETCH NEXT FROM [Loop_cursor]
        INTO
                                    @Intra_Batch_Loop_Sequence
                                    ,@Cnt
                                    ,@Cumulative ;

        WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @RowNum = @RowNum + 1 ;
/***************************************************************************************************
Creates an index when record load in batch drops below 10K and there are more than 20 loops left.
Indexes slow inserts while quickening extracts.  This is a previously proven balance.
***************************************************************************************************/
                                IF @Cnt < 10000 AND @IndexesCreated = 0 AND @IntraLoop_cursor_Cnt > ( @RowNum + 20 )
                                    BEGIN
                                        SET @IndexesCreated = 1 ;
                                        CREATE CLUSTERED INDEX [<%- tableName %>_NK_CLS] ON [#<%- tableName %>]( [<%- tableName %>_NK] ) ;
                                    END ;
                
/***************************************************************************************************
Dedupe the Rows-to-Update table.  This table is empty on teh first pas, but will grow over loops(s)
Instead of Updates in the loop, we create a temporary Rows-to-Update Table.  
It holds records to update in Destination Table in single update
***************************************************************************************************/
                                TRUNCATE TABLE [#UpdatesDeduped] ;
                
                                INSERT [#UpdatesDeduped] WITH( TABLOCK )
                                SELECT
                                                                            [a].[<%- tableName %>_PK]
                                                                            ,[a].[Invalidated_Batch_ID]
                                                                            ,[a].[<%- tableName %>_NK]
                                                                            ,[a].[Record_Valid_End_Datetime]
                                FROM [#Updates] AS [a]
                                INNER JOIN( 
                                                                            SELECT
                                                                                        [<%- tableName %>_PK]
                                                                                        ,MIN([UpdatesRowId]) AS [UpdatesRowId] 
                                                                            FROM [#Updates] 
                                                                            GROUP BY [<%- tableName %>_PK]
                                                                            ) AS [b] 
                                                                                        ON [a].[<%- tableName %>_PK] = [b].[<%- tableName %>_PK] 
                                                                                        AND [a].[UpdatesRowId] = [b].[UpdatesRowId]
                                WHERE @Updates_Row_count > 0
                                OPTION( RECOMPILE ) ;
                
                                SET @UpdatesDedupCnt = @@ROWCOUNT ;
                
/***************************************************************************************************
                DOUBLE INSERT - SEE CROSS APPLY
                1st Insert - New-New Record.  
                2nd Insert - New-Old Record.  
                            Records are inserted into our Working Table.  [To_Load] is set to 1(true)
                We calculate the IDENTITY to allow the optimizer to parallelize the insert
***************************************************************************************************/
--select * from [#<%- tableName %>]
                INSERT [#<%- tableName %>] WITH( TABLOCK )( 
                                                             [<%- tableName %>_PK]
                                                            ,[<%- tableName %>_NK], 

<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- " ".concat(column.name) 
%>
<% // javascript
  
  }) 
%>



                                                            ,[Business_Effective_Begin_Datetime]
                                                            ,[Business_Effective_End_Datetime]
                                                            ,[Record_Valid_Begin_Datetime]
                                                            ,[Record_Valid_End_Datetime]
                                                            ,[Entered_Datetime]
                                                            ,[Updated_Datetime]
                                                            ,[Intra_Batch_Loop_Sequence]
                                                            ,[Generated_Record_Ind]
                                                            ,[Change_HASH]
                                                            ,[Source_System_Code]
                                                            ,[To_Load] 
                                                            )
                                                            
                                                            SELECT
                                                            /* Calculated Identity */
                                                            ROW_NUMBER() OVER ( ORDER BY( SELECT 0 )) + ISNULL(@Current_<%- tableName %>_PK, 0) AS [<%- tableName %>_PK]
                                                                                                    ,[d].[<%- tableName %>_NK],

                                                                                                    <% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- "[d].".concat(column.name) 
%>
<% // javascript
  
  }) 
%>


                                                            ,[d].[Business_Effective_Begin_Datetime]
                                                            ,[d].[Business_Effective_End_Datetime]      
                                                            ,[d].[Record_Valid_Begin_Datetime]
                                                            ,[d].[Record_Valid_End_Datetime]
                                                            ,[d].[Entered_Datetime]
                                                            ,[d].[Updated_Datetime]
                                                            ,[d].[Intra_Batch_Loop_Sequence]
                                                            ,[d].[Generated_Record_Ind]
                                                            ,[d].[Change_HASH]
                                                            ,[d].[Source_System_Code]
                                                            ,1 AS [To_Load]
                FROM( 
                                                            SELECT * 
                                                            FROM [dbo].[TRANSIENT_<%- tableName %>] AS [t] 
                                                            WHERE [t].[Intra_Batch_Loop_Sequence] = @Intra_Batch_Loop_Sequence 
                                                            ) AS [t]
                LEFT JOIN( 
                                                            SELECT
                                                                        [e].[<%- tableName %>_PK]
                                                                        ,[e].[<%- tableName %>_NK],
                                                                        <% // javascript

                                                                        applyColumnSort(table.columns) // see function at end of script
                                                                        table.columns.forEach((column, columnIndex) => {
                                                                      
                                                                      %><%- columnIndex > 0 ? "," : " " 
                                                                      %><%- "[e].".concat(column.name) 
                                                                      %>
                                                                      <% // javascript
                                                                        
                                                                        }) 
                                                                      %>
                                                                      
                                                                      ,[e].[Business_Effective_Begin_Datetime]
                                                                      ,[e].[Business_Effective_End_Datetime]      
                                                                      ,[e].[Record_Valid_Begin_Datetime]
                                                                      ,CASE WHEN [u].[<%- tableName %>_PK] IS NOT NULL THEN [u].[Record_Valid_End_Datetime] ELSE [e].[Record_Valid_End_Datetime] END AS [Record_Valid_End_Datetime]
                                                                      ,[e].[Entered_Datetime]
                                                                      ,[e].[Updated_Datetime]
                                                                      ,[e].[Batch_ID]
                                                                      ,CASE WHEN [u].[<%- tableName %>_PK] IS NOT NULL THEN [u].[Invalidated_Batch_ID] ELSE [e].[Invalidated_Batch_ID] END AS [Invalidated_Batch_ID]
                                                                      ,[e].[Intra_Batch_Loop_Sequence]
                                                                      ,[e].[Generated_Record_Ind]
                                                                      ,[e].[Change_HASH]
                                                                      ,[e].[Source_System_Code]
                                                          FROM [#<%- tableName %>] AS [e]
                                                          LEFT JOIN( 
                                                                      SELECT * 
                                                                      FROM [#UpdatesDeduped] 
                                                                      WHERE @UpdatesDedupCnt > 0 
                                                                      ) AS [u] 
                                                                      ON [u].[<%- tableName %>_PK] = [e].[<%- tableName %>_PK] 
                                                          ) AS [e] 
                                                          ON @MatchingExistingCnt = 1 
                                                          AND [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK] 
                                                          AND [t].[Business_Effective_Begin_Datetime] >= [e].[Business_Effective_Begin_Datetime] 
                                                          AND [t].[Business_Effective_Begin_Datetime] <= [e].[Business_Effective_End_Datetime] 
                                                          AND [e].[Record_Valid_End_Datetime] = @EOT

                                                          /*Below Cross apply will return 1 (left join insert ) or (2 = left join insert + inner join insert */

                                                          CROSS APPLY(
                                                                                                      VALUES(
/***************************************************************************************************
                                          1st Insert - New-New Record ruleset for inclusion in move to Destination Table 
                                                      If there is no existing record OR the existing record's HASH doesn't match, add the record.
***************************************************************************************************/
                                                                                                                  CASE                                                                
                                                                                                                  --NEW Object
                                                                                                                             WHEN [e].[<%- tableName %>_NK] IS NULL 
                                                                                                                              THEN 1 
                                                                                                                   --EXISTING Normal
                                                                                                                             WHEN [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]  
                                                                                                                              AND  [t].[Change_HASH] <> [e].[Change_HASH] 
                                                                                                                              AND  [e].Business_Effective_End_Datetime = @EOT
                                                                                                                             AND  [e].Record_Valid_End_Datetime = @EOT
                                                                                                                             THEN 1 
                                                                                                                   --EXISTING OOS
                                                                                                                              WHEN [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]  
                                                                                                                              AND  [e].Business_Effective_End_Datetime <> @EOT
                                                                                                                              AND  [e].Record_Valid_End_Datetime = @EOT
                                                                                                                              THEN 1 
                                                                                                                   END
                                                                                                                  ,0 
                                                                                                                  ,CASE WHEN [e].[<%- tableName %>_NK] IS NULL 
                                                                                                                              THEN @BOT 
                                                                                                                              ELSE [t].[Business_Effective_Begin_Datetime] 
                                                                                                                   END
                                                                                                                  ,ISNULL([t].[Business_Effective_End_Datetime],@EOT)   
                                                                                                                  ,[t].[Record_Valid_Begin_Datetime] 
                                                                                                                  ,ISNULL([t].[Record_Valid_End_Datetime],@EOT)
                                                                                                                  ,[t].[Intra_Batch_Loop_Sequence]
                                                                                                                  ,[t].[<%- tableName %>_NK],
                                          
                                                                                                                  <% // javascript

                                                                                                                  applyColumnSort(table.columns) // see function at end of script
                                                                                                                  table.columns.forEach((column, columnIndex) => {
                                                                                                                
                                                                                                                %><%- columnIndex > 0 ? "," : " " 
                                                                                                                %><%- "[t].".concat(column.name) 
                                                                                                                %>
                                                                                                                <% // javascript
                                                                                                                  
                                                                                                                  }) 
                                                                                                                %>

                                                                                                                  ,[t].[Entered_Datetime]
                                                                        ,[t].[Updated_Datetime]
                                                                        ,[t].[Change_HASH]
                                                                        ,[t].[Source_System_Code] 
                                                             )
                                                            ,( 
                                                              /***************************************************************************************************
                                                              2nd Insert - New-Old Record.  
                                                                          If the existing record's HASH doesn't match, add the record, 
                                                                          UNLESS the new record would have a business effective end before its business effective begin (a DEAD record).
                                                              ***************************************************************************************************/
                                                                                                                                      CASE                                                               
                                                                                                                                       --EXISTING Normal
                                                                                                                                                  WHEN [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]  
                                                                                                                                                  AND  [t].[Change_HASH] <> [e].[Change_HASH]                                                                            
                                                                                                                                                  AND  [e].[Business_Effective_Begin_Datetime] < DATEADD(MILLISECOND,-1,[t].[Business_Effective_Begin_Datetime])
                                                                                                                                                  AND  [e].Business_Effective_End_Datetime = @EOT
                                                                                                                                                  AND  [e].Record_Valid_End_Datetime = @EOT
                                                                                                                                                 THEN 1
                                                                                                                                      --EXISTING OOS
                                                                                                                                                  WHEN [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]
                                                                                                                                                  AND  [e].[Business_Effective_Begin_Datetime] < DATEADD(MILLISECOND,-1,[t].[Business_Effective_Begin_Datetime])
                                                                                                                                                  AND  [e].Business_Effective_End_Datetime > [t].[Business_Effective_Begin_Datetime] 
                                                                                                                                                  AND  [e].Business_Effective_End_Datetime <> @EOT
                                                                                                                                                  AND  [e].Record_Valid_End_Datetime = @EOT
                                                                                                                                                  THEN 1 
                                                                                                                                       END
                                                                                                                                      ,1 
                                                                                                                                      ,[e].[Business_Effective_Begin_Datetime]
                                                                                                                                      ,DATEADD(MILLISECOND,-1,ISNULL([t].[Business_Effective_Begin_Datetime],@EOT))        
                                                                                                                                      ,[t].[Record_Valid_Begin_Datetime]
                                                                                                                                      ,ISNULL([t].[Record_Valid_End_Datetime],@EOT)
                                                                                                                                      ,[t].[Intra_Batch_Loop_Sequence]
                                                                                                                                      ,[e].[<%- tableName %>_NK],
                                                              
                                                                                                                                      <% // javascript

                                                                                                                                      applyColumnSort(table.columns) // see function at end of script
                                                                                                                                      table.columns.forEach((column, columnIndex) => {
                                                                                                                                    
                                                                                                                                    %><%- columnIndex > 0 ? "," : " " 
                                                                                                                                    %><%- "[e].".concat(column.name) 
                                                                                                                                    %>
                                                                                                                                    <% // javascript
                                                                                                                                      
                                                                                                                                      }) 
                                                                                                                                    %>



                                                                                                                                      ,[e].[Entered_Datetime]
                                                                        ,[e].[Updated_Datetime]
                                                                        ,[e].[Change_HASH]
                                                                        ,[e].[Source_System_Code] 
                                                                        )
                                                            ) d
                                                            (
                                                                        [ToAdd]
                                                                        ,[Generated_Record_Ind] 
                                                                        ,[Business_Effective_Begin_Datetime]
                                                                        ,[Business_Effective_End_Datetime]            
                                                                        ,[Record_Valid_Begin_Datetime]
                                                                        ,[Record_Valid_End_Datetime]
                                                                        ,[Intra_Batch_Loop_Sequence]
                                                                        ,[<%- tableName %>_NK],

                                                                        <% // javascript

                                                                        applyColumnSort(table.columns) // see function at end of script
                                                                        table.columns.forEach((column, columnIndex) => {
                                                                      
                                                                      %><%- columnIndex > 0 ? "," : " " 
                                                                      %><%- " ".concat(column.name) 
                                                                      %>
                                                                      <% // javascript
                                                                        
                                                                        }) 
                                                                      %>
                                                                      ,[Entered_Datetime]
                                                                      ,[Updated_Datetime]
                                                                      ,[Change_HASH]
                                                                      ,[Source_System_Code] 
                                                          )
              WHERE [d].[ToAdd] = 1
              OPTION( RECOMPILE ) ;

              SELECT
                  @ROWCOUNT = @@ROWCOUNT
                , @Current_<%- tableName %>_PK = ISNULL(@Current_<%- tableName %>_PK, 0) + @@ROWCOUNT
                , @MatchingExistingCnt = CASE WHEN @@ROWCOUNT > 0 THEN 1 ELSE @MatchingExistingCnt END ;

/***************************************************************************************************
1 Update - Old-Old Record.  
          Instead of Updates in the loop, we create a temporary Rows-to-Update Table.  
          It holds records to update in Destination Table in single update
***************************************************************************************************/
INSERT [#Updates] WITH( TABLOCK )( [UpdatesRowId], [<%- tableName %>_PK], [<%- tableName %>_NK], [Invalidated_Batch_ID], [Record_Valid_End_Datetime] )
SELECT
                                            ROW_NUMBER() OVER ( ORDER BY( SELECT 0 )) + ISNULL(@Updates_Row_count, 0) AS [UpdatesRowId]
                                            ,[e].[<%- tableName %>_PK]
                                            ,[e].[<%- tableName %>_NK]
                                            ,CAST(@Batch_ID AS VARCHAR) + '#' + CAST(@Intra_Batch_Loop_Sequence AS VARCHAR) AS [Invalidated_Batch_ID]
                                            ,DATEADD(MILLISECOND, -1, [t].[Record_Valid_Begin_Datetime]) AS [Record_Valid_End_Datetime]
FROM [#<%- tableName %>] AS [e]
LEFT JOIN [#UpdatesDeduped] AS [u] 
                                            ON @UpdatesDedupCnt > 0 
                                            AND [u].[<%- tableName %>_PK] = [e].[<%- tableName %>_PK]
INNER JOIN( 
                                            SELECT * 
                                            FROM [#<%- tableName %>] AS [n] 
                                            WHERE [n].[Intra_Batch_Loop_Sequence] = @Intra_Batch_Loop_Sequence 
                                            AND ISNULL ([n].Batch_ID,@Batch_ID) = @Batch_ID
                                            ) AS [t] 
                                            ON                                           
                       --EXISTING Normal
                                            (
                                                        ( [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]  
                                                                     AND (
                                                                                (t.[Intra_Batch_Loop_Sequence] > [e].[Intra_Batch_Loop_Sequence] 
                                                                                AND ISNULL([e].Batch_ID,@Batch_ID) = @Batch_ID) 
                                                                                OR ISNULL([e].Batch_ID,@Batch_ID) <> @Batch_ID 
                                                                                 )
                                                                                AND [t].[Change_HASH] <> [e].[Change_HASH] 
                                                                                AND [e].[Business_Effective_Begin_Datetime] < [t].[Business_Effective_Begin_Datetime]
                                                                                AND [e].Business_Effective_End_Datetime = @EOT
                                                                                AND COALESCE([u].[Record_Valid_End_Datetime],[e].Record_Valid_End_Datetime) = @EOT
                                                                                )
                                --EXISTING OOS
                                                       OR 
                                                                    (           [t].[<%- tableName %>_NK] = [e].[<%- tableName %>_NK]  
                                                                                AND (
                                                                                            (t.[Intra_Batch_Loop_Sequence] > [e].[Intra_Batch_Loop_Sequence] 
                                                                                            AND ISNULL([e].Batch_ID,@Batch_ID) = @Batch_ID)
                                                                                            OR ISNULL([e].Batch_ID,@Batch_ID) <> @Batch_ID 
                                                                                            )
                                                                                            AND [e].[Business_Effective_End_Datetime] > [t].[Business_Effective_Begin_Datetime]
                                                                                            AND COALESCE([u].[Record_Valid_End_Datetime],[e].Record_Valid_End_Datetime) = @EOT
                                                                                            )
                                                          )
                                            OPTION( RECOMPILE ) ;

SELECT
                                            @ROWCOUNT = @@ROWCOUNT
                                            ,@Updates_Row_count = ISNULL(@Updates_Row_count, 0) + @@ROWCOUNT
                                            ,@MatchingExistingCnt = CASE WHEN @@ROWCOUNT > 0 THEN 1 ELSE @MatchingExistingCnt END ;

IF @Updates_Row_count > 20000 AND @Updates_Has_Index = 0
    BEGIN
    SET @Updates_Has_Index = 1 ;
    /***************************************************************************************************
    Creates an index when the Rows-to-Update Table gets over 20K
    Indexes slow inserts while quickening extracts.  This is a previously proven balance.
    ***************************************************************************************************/
                    CREATE UNIQUE CLUSTERED INDEX [UpdatesRowId_CLS] ON [#Updates]( [<%- tableName %>_PK], [UpdatesRowId] DESC ) ;
                        END ;
    
                    FETCH NEXT FROM [Loop_cursor]
                    INTO
                        @Intra_Batch_Loop_Sequence
                      , @Cnt
                      , @Cumulative ;
                END ;
    
            CLOSE [Loop_cursor] ;
            DEALLOCATE [Loop_cursor] ;
    
    /***************************************************************************************************
    Dedupe the Rows-to-Update table.  This table is empty on the first pass, but will grow over loops(s)
                Instead of Updates in the loop, we create a temporary Rows-to-Update Table.  
                It holds records to update in Destination Table in single update
    ***************************************************************************************************/
            TRUNCATE TABLE [#UpdatesDeduped] ;
    
            INSERT [#UpdatesDeduped] WITH( TABLOCK )
            SELECT
                                        [a].[<%- tableName %>_PK]
                                        ,[a].[Invalidated_Batch_ID]
                                        ,A.[<%- tableName %>_NK]
                                        ,[a].[Record_Valid_End_Datetime]
            FROM [#Updates] AS [a]
            INNER JOIN( 
                                        SELECT 
                                                     [<%- tableName %>_PK]
                                                    ,MIN([UpdatesRowId]) AS [UpdatesRowId] 
                                        FROM [#Updates] 
                                        GROUP BY [<%- tableName %>_PK] 
                                        ) AS [b] 
                                        ON [a].[<%- tableName %>_PK] = [b].[<%- tableName %>_PK] AND [a].[UpdatesRowId] = [b].[UpdatesRowId]
            WHERE @Updates_Row_count > 0
            OPTION( RECOMPILE ) ;
    
            SELECT
                                        @UpdatesDedupCnt = @@ROWCOUNT
                                        ,@TargetTotalUpdatedRecordCount = ISNULL(@TargetTotalUpdatedRecordCount, 0) + @@ROWCOUNT ;
    
    /***************************************************************************************************
    INSERT both 1st and 2nd Insert records into Destination Table ALL records where To_Load = 1
    ***************************************************************************************************/
            INSERT [dbo].[<%- tableName %>] WITH( TABLOCK )( 
                                         [<%- tableName %>_PK]
                                        ,[<%- tableName %>_NK],
                                        <% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- " ".concat(column.name) 
%>
<% // javascript
  
  }) 
%>
,[Business_Effective_Begin_Datetime]
,[Business_Effective_End_Datetime]            
,[Record_Valid_Begin_Datetime]
,[Record_Valid_End_Datetime]
,[Entered_Datetime]
,[Updated_Datetime]
,[Batch_ID]
,[Invalidated_Batch_ID]
,[Intra_Batch_Loop_Sequence]
,[Generated_Record_Ind]
,[Change_HASH]
,[Source_System_Code] 
)
SELECT
MIN( [e].[<%- tableName %>_PK]) 
,[e].[<%- tableName %>_NK],  
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- "[e].".concat(column.name) 
%>
<% // javascript
  
  }) 
%>
,[e].[Business_Effective_Begin_Datetime]
                                    ,[e].[Business_Effective_End_Datetime]      
                                    ,[e].[Record_Valid_Begin_Datetime]                        
                                    ,CASE WHEN [u].[<%- tableName %>_NK] IS NOT NULL 
                                                THEN [u].[Record_Valid_End_Datetime] 
                                                ELSE [e].[Record_Valid_End_Datetime] 
                                     END AS [Record_Valid_End_Datetime]
                                    ,GETDATE () as [Entered_Datetime] 
                                    ,GETDATE () as [Updated_Datetime]
                                    ,@Batch_ID AS [Batch_ID]                            
                                    ,CASE WHEN [u].[<%- tableName %>_NK] IS NOT NULL 
                                                THEN [u].[Invalidated_Batch_ID] 
                                                ELSE [e].[Invalidated_Batch_ID] 
                                     END AS [Invalidated_Batch_ID]
                                    ,[e].[Intra_Batch_Loop_Sequence]
                                    ,[e].[Generated_Record_Ind]
                                    ,[e].[Change_HASH]
                                    ,[e].[Source_System_Code]
        FROM [#<%- tableName %>] AS [e]
        LEFT JOIN [#UpdatesDeduped] AS [u] 
                                    ON [u].[<%- tableName %>_PK] = [e].[<%- tableName %>_PK]
        WHERE [e].[To_Load] = 1
                        GROUP BY [e].[<%- tableName %>_NK],
                        <% // javascript

                        applyColumnSort(table.columns) // see function at end of script
                        table.columns.forEach((column, columnIndex) => {
                      
                      %><%- columnIndex > 0 ? "," : " " 
                      %><%- "[e].".concat(column.name) 
                      %>
                      <% // javascript
                        
                        }) 
                      %>
                      ,[e].[Business_Effective_Begin_Datetime]
                      ,[e].[Business_Effective_End_Datetime]      
                      ,[e].[Record_Valid_Begin_Datetime]
                      ,[u].[<%- tableName %>_NK] 
                      ,[u].[Record_Valid_End_Datetime] 
                      ,[e].[Record_Valid_End_Datetime] 
                      ,[u].[Invalidated_Batch_ID] 
                      ,[e].[Invalidated_Batch_ID] 
                      ,[e].[Intra_Batch_Loop_Sequence]
                      ,[e].[Generated_Record_Ind]
                      ,[e].[Change_HASH]
                      ,[e].[Source_System_Code]
OPTION( RECOMPILE ) ;

SET @TargetEndRecordCount = ISNULL(@TargetStartRecordCount, 0) + @@ROWCOUNT ;

SELECT @TargetNewObjectCount = COUNT(DISTINCT [e].[<%- tableName %>_NK])
FROM [#<%- tableName %>] AS [e]
WHERE [e].[To_Load] = 1
OPTION (RECOMPILE) ;

/***************************************************************************************************
UPDATE the 1 Update records in the Destination Table 
***************************************************************************************************/

UPDATE [a]
SET
                      [a].[Record_Valid_End_Datetime] = [u].[Record_Valid_End_Datetime]
                      ,[a].[Invalidated_Batch_ID] = [u].[Invalidated_Batch_ID]
                      ,[a].Updated_Datetime = Getdate()
FROM [dbo].[<%- tableName %>] AS [a]
INNER JOIN [#UpdatesDeduped] AS [u] 
                      ON [a].[<%- tableName %>_PK] = [u].[<%- tableName %>_PK]
WHERE NOT EXISTS ( 
                      SELECT 1 
                      FROM [#<%- tableName %>] AS [e] 
                      WHERE E.[<%- tableName %>_PK] = A.[<%- tableName %>_PK] 
                      AND [e].[To_Load] = 1 
                      )
OPTION( RECOMPILE ) ;

SELECT 
                       @TargetTotalUpdatedObjectCount = COUNT(DISTINCT [<%- tableName %>_NK])
FROM [#UpdatesDeduped] ;

SET @Success = 1 ;
END TRY
BEGIN CATCH
SET @ErrorMessage = ERROR_MESSAGE() ;

THROW ;

BEGIN TRY
CLOSE [Loop_cursor] ;
DEALLOCATE [Loop_cursor] ;
END TRY
BEGIN CATCH
END CATCH ;
END CATCH ;
RETURN ;
GO



<% // javascript
  
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>