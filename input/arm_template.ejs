@@@FILE:[test/arm_template_v1.json]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.AdfOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)
%>
{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
      "factoryName": {
          "type": "string",
          "metadata": "Data Factory name",
          "defaultValue": "d-bia-adf"
      },
      "Audit_properties_typeProperties_connectionString_secretName": {
          "type": "string",
          "defaultValue": "connectionstring-audit"
      },
      "EDW_properties_typeProperties_connectionString_secretName": {
          "type": "string",
          "defaultValue": "connectionstring-PLM-EDW"
      },
      
      "lnk_AzSqlMi_Current_Instec_Policy_properties_typeProperties_connectionString_secretName": {
        "type": "string",
        "defaultValue": "DataLakeIAP"
        },
        "lnk_AzSqlMi_Current_Insurity_Claim_properties_typeProperties_connectionString_secretName": {
        "type": "string",
        "defaultValue": "DataLakeIAP"
        },
     
      "AKV_properties_typeProperties_baseUrl": {
      "type": "string",
      "defaultValue": "https://mkv.vault.azure.net/"
      }
      
  },
  "variables": {
      "factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
  },
  "resources": [
  
    <%
dbJson.tables.forEach(table => {

    const tableName = codifier.codifyText(
      table.domain ? table.domain.concat("_", table.name) : table.name,
      codifyOptions
    )

%>
{
"name": "[concat(parameters('factoryName'), '/<%- tableName %>')]",
"type": "Microsoft.DataFactory/factories/pipelines",
"apiVersion": "2018-06-01",
"properties": {
    "activities": [
        {
            "name": "cdmProcessBatchInitiate",
            "description": "Process Batch Initiate will register the pipeline run in the CDM Framework. As an output it gives process_batch_key to be utilized in the Pipeline workflow.",
            "type": "Lookup",
            "dependsOn": [],
            "policy": {
                "timeout": "7.00:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureOutput": false,
                "secureInput": false
            },
            "userProperties": [],
            "typeProperties": {
                "source": {
                    "type": "AzureSqlSource",
                    "sqlReaderStoredProcedureName": "cdm.process_batch_initiate_internal",
                    "storedProcedureParameters": {
                        "channel_uid": {
                            "type": "String",
                            "value": null
                        },
                        "comments": {
                            "type": "String",
                            "value": null
                        },
                        "limit_channel_uid": {
                            "type": "String",
                            "value": null
                        },
                        "limit_process_uid": {
                            "type": "String",
                            "value": null
                        },
                        "process_uid": {
                            "type": "String",
                            "value": {
                                "value": "@CONCAT(pipeline().parameters.ProjectName, '::',pipeline().Pipeline)",
                                "type": "Expression"
                            }
                        },
                        "scope": {
                            "type": "String",
                            "value": null
                        },
                        "workflow_guid": {
                            "type": "String",
                            "value": {
                                "value": "@pipeline().RunId",
                                "type": "Expression"
                            }
                        },
                        "workflow_name": {
                            "type": "String",
                            "value": {
                                "value": "@pipeline().Pipeline",
                                "type": "Expression"
                            }
                        },
                        "workflow_version": {
                            "type": "String",
                            "value": {
                                "value": "@pipeline().parameters.PipelineVersionID",
                                "type": "Expression"
                            }
                        }
                    },
                    "queryTimeout": "02:00:00",
                    "partitionOption": "None"
                },
                "dataset": {
                    "referenceName": "Audit",
                    "type": "DatasetReference",
                    "parameters": {}
                }
            }
        },
        {
          "name": "setProcessBatchKey",
          "description": "Assign ProcessBatchKey value returned from ProcessBatchInitiate to Variable",
          "type": "SetVariable",
          "dependsOn": [
              {
                  "activity": "cdmProcessBatchInitiate",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "variableName": "ProcessBatchKey",
              "value": {
                  "value": "@string(activity('cdmProcessBatchInitiate').output.firstrow.process_batch_key)",
                  "type": "Expression"
              }
          }
      },
      {
          "name": "setSourceSqlQuery",
          "description": "Construct Source SQL Query to be used in CopyData Activity i.e. Load Transient Table.\nQuery is Constructed from SourceStoredProcedure + StartDate + CutOffDate.",
          "type": "SetVariable",
          "dependsOn": [
              {
                  "activity": "setProcessBatchKey",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "variableName": "SourceSqlQuery",
              "value": {
                  "value": "@CONCAT('EXEC ',variables('SourceStoredProcedure'),\n' '''\n,pipeline().parameters.StartDate\n,'''  '\n,','\n,''' '\n,pipeline().parameters.CutOffDate\n,''''\n)",
                  "type": "Expression"
              }
          }
      },
      {
          "name": "Load Transient Table",
          "description": "Copy Activity will Truncate and Load Transient Table.",
          "type": "Copy",
          "dependsOn": [
              {
                  "activity": "setSourceSqlQuery",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
          },
          "userProperties": [],
          "typeProperties": {
              "source": {
                  "type": "AzureSqlSource",
                  "sqlReaderQuery": {
                      "value": "@variables('SourceSqlQuery')",
                      "type": "Expression"
                  },
                  "queryTimeout": "02:00:00",
                  "partitionOption": "None"
              },
              "sink": {
                  "type": "AzureSqlSink",
                  "preCopyScript": {
                      "value": "@{concat('TRUNCATE TABLE ' ,variables('TransientTable'))}",
                      "type": "Expression"
                  },
                  "disableMetricsCollection": false
              },
              "enableStaging": false,
              "translator": {
                  "type": "TabularTranslator",
                  "mappings": [
                  
                  {
                    "source": {
                    "name": "<%- tableName %>_NK",
                    "type": "String"
                    },
                    "sink": {
                    "name": "<%- tableName %>_NK",
                    "type": "String"
                    }
                    },
                    {
                      "source": {
                      "name": "<%- tableName %>_FK",
                      "type": "String"
                      },
                      "sink": {
                      "name": "<%- tableName %>_FK",
                      "type": "String"
                      }
                      },
                   <% // javascript
                    applyColumnSort(table.columns) // see function at end of script
                    table.columns.forEach((column, columnIndex) => {
                      %>
                      {
                        "source": {
                        "name": "<%- column.baseName %>",
                        "type": "<%- column.dataType %>"
                        },
                        "sink": {
                        "name": "<%- column.baseName %>",
                        "type": "<%- column.dataType %>"
                        }
                        },
                  %>
                  <% // javascript
                  }) 
                  %> 
                  {
                    "source": {
                        "name": "BUSINESS_EFFECTIVE_BEGIN_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "BUSINESS_EFFECTIVE_BEGIN_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                            {
                        "source": {
                        "name": "BUSINESS_EFFECTIVE_END_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "BUSINESS_EFFECTIVE_END_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                            {
                        "source": {
                        "name": "RECORD_VALID_BEGIN_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "RECORD_VALID_BEGIN_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                            {
                        "source": {
                        "name": "RECORD_VALID_END_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "RECORD_VALID_END_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                            {
                        "source": {
                        "name": "ENTERED_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "ENTERED_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                            {
                        "source": {
                        "name": "UPDATED_DATETIME",
                        "type": "DateTime"
                        },
                        "sink": {
                        "name": "UPDATED_DATETIME",
                        "type": "DateTime"
                        }
                        },
                                  {
                        "source": {
                        "name": "BATCH_ID",
                        "type": "INT"
                        },
                        "sink": {
                        "name": "BATCH_ID",
                        "type": "INT"
                        }
                        },
                        {
                            "source": {
                            "name": "INVALIDATED_BATCH_ID",
                            "type": "INT"
                            },
                            "sink": {
                            "name": "INVALIDATED_BATCH_ID",
                            "type": "INT"
                            }
                            },
                                  {
                        "source": {
                        "name": "INTRA_BATCH_LOOP_SEQUENCE",
                        "type": "INT"
                        },
                        "sink": {
                        "name": "INTRA_BATCH_LOOP_SEQUENCE",
                        "type": "INT"
                        }
                        },
                        {
                            "source": {
                            "name": "GENERATED_RECORD_IND",
                            "type": "String"
                            },
                            "sink": {
                            "name": "GENERATED_RECORD_IND",
                            "type": "String"
                            }
                            },      	
                        {
                        "source": {
                        "name": "SOURCE_SYSTEM_CODE",
                        "type": "String"
                        },
                        "sink": {
                        "name": "SOURCE_SYSTEM_CODE",
                        "type": "String"
                        }
                        },
                                  {
                        "source": {
                        "name": "CHANGE_HASH",
                        "type": "Byte[]"
                        },
                        "sink": {
                        "name": "CHANGE_HASH",
                        "type": "Byte[]"
                    }
                    }
                  
                  ]
              }
          },
          "inputs": [
              {
                  "referenceName": "DataLake_Instec",
                  "type": "DatasetReference",
                  "parameters": {}
              }
          ],
          "outputs": [
              {
                  "referenceName": "Transient_<%- tableName %>",
                  "type": "DatasetReference",
                  "parameters": {}
              }
          ]
      },
      {
"name": "List INTRA_BATCH_LOOP_SEQUENCE",
          "description": "List INTRA_BATCH_LOOP_SEQUENCE that will be looped in ASC order in ForEach Loop Activity to Implement Bi-Temporal.",
          "type": "Lookup",
          "dependsOn": [
              {
                  "activity": "setSourceCount",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "policy": {
              "timeout": "7.00:00:00",
              "retry": 0,
              "retryIntervalInSeconds": 30,
              "secureOutput": false,
              "secureInput": false
          },
          "userProperties": [],
          "typeProperties": {
              "source": {
                  "type": "AzureSqlSource",
                  "sqlReaderQuery": {
                      "value": "@concat('SELECT DISTINCT INTRA_BATCH_LOOP_SEQUENCE FROM ',variables('TransientTable'),' ORDER BY INTRA_BATCH_LOOP_SEQUENCE')",
                      "type": "Expression"
                  },
                  "queryTimeout": "02:00:00",
                  "partitionOption": "None"
              },
              "dataset": {
                  "referenceName": "EDW",
                  "type": "DatasetReference",
                  "parameters": {}
              },
              "firstRowOnly": false
          }
      },
      {
          "name": "SubBatchProcessing",
          "description": "Loop over List INTRA_BATCH_LOOP_SEQUENCE Value set.",
          "type": "ForEach",
          "dependsOn": [
              {
                  "activity": "List INTRA_BATCH_LOOP_SEQUENCE",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "items": {
                  "value": "@activity('List INTRA_BATCH_LOOP_SEQUENCE').output.value",
                  "type": "Expression"
              },
              "isSequential": true,
              "activities": [
                  {
                      "name": "Two Insert - One Update",
                      "type": "Lookup",
                      "dependsOn": [],
                      "policy": {
                          "timeout": "7.00:00:00",
                          "retry": 0,
                          "retryIntervalInSeconds": 30,
                          "secureOutput": false,
                          "secureInput": false
                      },
                      "userProperties": [],
                      "typeProperties": {
                          "source": {
                              "type": "AzureSqlSource",
                              "sqlReaderStoredProcedureName": "dbo.usp_LOAD_<%- tableName %>",
                              "storedProcedureParameters": {
                                  "AttrList": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('AttributeList')",
                                          "type": "Expression"
                                      }
                                  },
                                  "IterationTimestamp": {
                                      "type": "String",
                                      "value": {
                                          "value": "@utcnow()",
                                          "type": "Expression"
                                      }
                                  },
                                  "NaturalKeyColumns": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('NaturalKeyColumns')",
                                          "type": "Expression"
                                      }
                                  },
                                  "PrimaryKeyColumns": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('PrimaryKeyColumns')",
                                          "type": "Expression"
                                      }
                                  },
                                  "process_batch_key": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('ProcessBatchKey')",
                                          "type": "Expression"
                                      }
                                  },
                                  "SeqNum": {
                                      "type": "String",
                                      "value": {
                                          "value": "@item().INTRA_BATCH_LOOP_SEQUENCE",
                                          "type": "Expression"
                                      }
                                  },
                                  "targettable": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('TargetTable')",
                                          "type": "Expression"
                                      }
                                  },
                                  "transienttable": {
                                      "type": "String",
                                      "value": {
                                          "value": "@variables('TransientTable')",
                                          "type": "Expression"
                                      }
                                  }
                              },
                              "queryTimeout": "02:00:00",
                              "partitionOption": "None"
                          },
                          "dataset": {
                              "referenceName": "EDW",
                              "type": "DatasetReference",
                              "parameters": {}
                          }
                      }
                  },
                  {
                      "name": "setInsertedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "Two Insert - One Update",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "InsertedCount",
                          "value": {
                              "value": "@string(activity('Two Insert - One Update').output.firstrow.InsertedCount)",
                              "type": "Expression"
                          }
                      }
                  },
                  {
                      "name": "setTotalInsertedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "setInterimInsertedCount",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          },
                          {
                              "activity": "setInsertedCount",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "TotalInsertedCount",
                          "value": {
                              "value": "@string(add(int(variables('InterimInsertedCount')),int(variables('InsertedCount'))))",
                              "type": "Expression"
                          }
                      }
                  },
                  {
                      "name": "setInterimInsertedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "Two Insert - One Update",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "InterimInsertedCount",
                          "value": {
                              "value": "@variables('TotalInsertedCount')",
                              "type": "Expression"
                          }
                      }
                  },
                  {
                      "name": "setUpdatedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "Two Insert - One Update",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "UpdatedCount",
                          "value": {
                              "value": "@string(activity('Two Insert - One Update').output.firstrow.UpdatedCount)",
                              "type": "Expression"
                          }
                      }
                  },
                  {
                      "name": "setInterimUpdatedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "Two Insert - One Update",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "InterimUpdatedCount",
                          "value": {
                              "value": "@variables('TotalUpdatedCount')",
                              "type": "Expression"
                          }
                      }
                  },
                  {
                      "name": "setTotalUpdatedCount",
                      "type": "SetVariable",
                      "dependsOn": [
                          {
                              "activity": "setUpdatedCount",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          },
                          {
                              "activity": "setInterimUpdatedCount",
                              "dependencyConditions": [
                                  "Succeeded"
                              ]
                          }
                      ],
                      "userProperties": [],
                      "typeProperties": {
                          "variableName": "TotalUpdatedCount",
                          "value": {
                              "value": "@string(add(int(variables('InterimUpdatedCount')),int(variables('UpdatedCount'))))",
                              "type": "Expression"
                          }
                      }
                  }
              ]
          }
      },
      {
          "name": "cdmProcessBatchConclude",
          "type": "ExecutePipeline",
          "dependsOn": [
              {
                  "activity": "SubBatchProcessing",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "pipeline": {
                  "referenceName": "cdmProcessBatchConclude",
                  "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                  "process_batch_key": {
                      "value": "@variables('ProcessBatchKey')",
                      "type": "Expression"
                  },
                  "source_record_ct": {
                      "value": "@variables('SourceCount')",
                      "type": "Expression"
                  },
                  "inserted_record_ct": {
                      "value": "@variables('TotalInsertedCount')",
                      "type": "Expression"
                  },
                  "updated_record_ct": {
                      "value": "@variables('TotalUpdatedCount')",
                      "type": "Expression"
                  },
                  "deleted_record_ct": "0",
                  "completed_ind": "1"
              }
          }
      },
      {
          "name": "cdmProcessBatchErrorListIntraBatchLoopInt",
          "type": "ExecutePipeline",
          "dependsOn": [
              {
                  "activity": "List INTRA_BATCH_LOOP_SEQUENCE",
                  "dependencyConditions": [
                      "Failed"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "pipeline": {
                  "referenceName": "cdmProcessBatchError",
                  "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                  "ProcessBatchKey": {
                      "value": "@variables('ProcessBatchKey')",
                      "type": "Expression"
                  },
                  "ErrorMessage": {
                      "value": "@activity('List INTRA_BATCH_LOOP_SEQUENCE').error.message",
                      "type": "Expression"
                  },
                  "ErrorNumber": {
                      "value": "-1",
                      "type": "Expression"
                  },
                  "ErrorScope": {
                      "value": "@activity('List INTRA_BATCH_LOOP_SEQUENCE').activityrunid",
                      "type": "Expression"
                  }
              }
          }
      },
      {
          "name": "cdmProcessBatchErrorLoadTransientTable",
          "type": "ExecutePipeline",
          "dependsOn": [
              {
                  "activity": "Load Transient Table",
                  "dependencyConditions": [
                      "Failed"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "pipeline": {
                  "referenceName": "cdmProcessBatchError",
                  "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                  "ProcessBatchKey": {
                      "value": "@variables('ProcessBatchKey')",
                      "type": "Expression"
                  },
                  "ErrorMessage": {
                      "value": "@activity('Load Transient Table').error.message",
                      "type": "Expression"
                  },
                  "ErrorNumber": {
                      "value": "-1",
                      "type": "Expression"
                  },
                  "ErrorScope": {
                      "value": "@activity('Load Transient Table').activityrunid",
                      "type": "Expression"
                  }
              }
          }
      },
      {
          "name": "cdmProcessBatchError",
          "type": "ExecutePipeline",
          "dependsOn": [
              {
                  "activity": "SubBatchProcessing",
                  "dependencyConditions": [
                      "Failed"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "pipeline": {
                  "referenceName": "cdmProcessBatchError",
                  "type": "PipelineReference"
              },
              "waitOnCompletion": true,
              "parameters": {
                  "ProcessBatchKey": {
                      "value": "@variables('ProcessBatchKey')",
                      "type": "Expression"
                  },
                  "ErrorMessage": {
                      "value": "@concat('Failed:SubBatchProcessing','')",
                      "type": "Expression"
                  },
                  "ErrorNumber": {
                      "value": "-1",
                      "type": "Expression"
                  },
                  "ErrorScope": {
                      "value": "@pipeline().RunId",
                      "type": "Expression"
                  }
              }
          }
      },
      {
          "name": "setSourceCount",
          "type": "SetVariable",
          "dependsOn": [
              {
                  "activity": "Load Transient Table",
                  "dependencyConditions": [
                      "Succeeded"
                  ]
              }
          ],
          "userProperties": [],
          "typeProperties": {
              "variableName": "SourceCount",
              "value": {
                  "value": "@string(activity('Load Transient Table').output.rowsRead)",
                  "type": "Expression"
              }
          }
      }
  ],
  "policy": {
    "elapsedTimeMetric": {},
    "cancelAfter": {}
},
"parameters": {
    "ProjectName": {
        "type": "string",
        "defaultValue": "DataLakeToEDW"
    },
    "PipelineVersionID": {
        "type": "string",
        "defaultValue": "1.0"
    },
    "StartDate": {
        "type": "string",
        "defaultValue": "2019-06-06"
    },
    "CutOffDate": {
        "type": "string",
        "defaultValue": "2019-06-07"
    }
},
               
"variables": {
  "ProcessBatchKey": {
      "type": "String"
  },
  "AttributeList": {
    "type": "String",
    "defaultValue": "<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {
%><%- columnIndex > 0 ? "," : ""%><%-"ZZ_".concat(column.baseName)%><% // javascript 
}) 
%>"
  },
  "NaturalKeyColumns": {
      "type": "String",
      "defaultValue": "<%- tableName %>_NK"
  },
  "NaturalKeyDelimiter": {
      "type": "String",
      "defaultValue": "#"
  },
  "PrimaryKeyColumns": {
      "type": "String",
      "defaultValue": "<%- tableName %>_PK"
  },
  "SourceStoredProcedure": {
      "type": "String",
      "defaultValue": "usp_Instec_<%- tableName %>"
  },
  "TargetTable": {
      "type": "String",
      "defaultValue": "<%- tableName %>"
  },
  "TransientTable": {
      "type": "String",
      "defaultValue": "Transient_<%- tableName %>"
  },
  "SourceSqlQuery": {
      "type": "String",
      "defaultValue": "EXEC usp_Instec_<%- tableName %> '2019-06-06' , '2019-06-07'"
  },
  "InsertedCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "UpdatedCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "SourceCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "TotalInsertedCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "InterimInsertedCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "TotalUpdatedCount": {
      "type": "String",
      "defaultValue": "0"
  },
  "InterimUpdatedCount": {
      "type": "String",
      "defaultValue": "0"
  }
},
"folder": {
  "name": "DataLakeToEDW/Policy_Instec"
},
"annotations": [],
"lastPublishTime": "2021-04-06T10:49:23Z"
},
"dependsOn": [

"[concat(variables('factoryId'), '/datasets/Audit')]",
"[concat(variables('factoryId'), '/datasets/DataLake_Instec')]",
"[concat(variables('factoryId'), '/datasets/Transient_<%- tableName %>')]",
"[concat(variables('factoryId'), '/datasets/EDW')]"
]
},
{
"name": "[concat(parameters('factoryName'), '/Transient_<%- tableName %>')]",
"type": "Microsoft.DataFactory/factories/datasets",
"apiVersion": "2018-06-01",
"properties": {
"linkedServiceName": {
  "referenceName": "EDW",
  "type": "LinkedServiceReference"
},
"folder": {
  "name": "Azure SQL/EDW"
},
"annotations": [],
"type": "AzureSqlMITable",
"schema": [],
"typeProperties": {
  "schema": "dbo",
  "table": "Transient_<%- tableName %>"
}
},
"dependsOn": [

"[concat(variables('factoryId'), '/linkedServices/EDW')]"
]
},
<% // javascript

  const pkColumns = table.columns.filter(c => c.primary === true).map(c => c.name) ?? []
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>
<% // javascript
 
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>
{
    "name": "[concat(parameters('factoryName'), '/Audit')]",
    "type": "Microsoft.DataFactory/factories/datasets",
    "apiVersion": "2018-06-01",
    "properties": {
    "description": "This is datasets point to Audit Database and will be used to execute Stored procedures of it.",
    "linkedServiceName": {
      "referenceName": "Audit",
      "type": "LinkedServiceReference"
    },
    "folder": {
      "name": "Azure SQL/Audit"
    },
    "annotations": [],
    "type": "AzureSqlMITable",
    "schema": [],
    "typeProperties": {}
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/linkedServices/Audit')]"
    ]
    },
    {
    "name": "[concat(parameters('factoryName'), '/DataLake')]",
    "type": "Microsoft.DataFactory/factories/datasets",
    "apiVersion": "2018-06-01",
    "properties": {
    "description": "This is datasets point to DataLake Database and will be used to execute Stored procedures of it.",
    "linkedServiceName": {
      "referenceName": "lnk_AzSqlMi_Current_Insurity_Claim",
      "type": "LinkedServiceReference"
    },
    "folder": {
      "name": "Azure SQL/DataLake"
    },
    "annotations": [],
    "type": "AzureSqlMITable",
    "schema": [],
    "typeProperties": {}
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/linkedServices/lnk_AzSqlMi_Current_Insurity_Claim')]"
    ]
    },
    {
    "name": "[concat(parameters('factoryName'), '/DataLake_Instec')]",
    "type": "Microsoft.DataFactory/factories/datasets",
    "apiVersion": "2018-06-01",
    "properties": {
    "description": "This is datasets point to DataLake_Instec Database and will be used to execute Stored procedures of it.",
    "linkedServiceName": {
      "referenceName": "lnk_AzSqlMi_Current_Instec_Policy",
      "type": "LinkedServiceReference"
    },
    "folder": {
      "name": "Azure SQL/DataLake"
    },
    "annotations": [],
    "type": "AzureSqlMITable",
    "schema": [],
    "typeProperties": {}
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/linkedServices/lnk_AzSqlMi_Current_Instec_Policy')]"
    ]
    },
    
    {
    "name": "[concat(parameters('factoryName'), '/EDW')]",
    "type": "Microsoft.DataFactory/factories/datasets",
    "apiVersion": "2018-06-01",
    "properties": {
    "description": "This is datasets point to EDW Database and will be used to execute Stored procedures of it.",
    "linkedServiceName": {
      "referenceName": "EDW",
      "type": "LinkedServiceReference"
    },
    "folder": {
      "name": "Azure SQL/EDW"
    },
    "annotations": [],
    "type": "AzureSqlMITable",
    "schema": [],
    "typeProperties": {}
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/linkedServices/EDW')]"
    ]
    },
    
{
    "name": "[concat(parameters('factoryName'), '/Audit')]",
    "type": "Microsoft.DataFactory/factories/linkedServices",
    "apiVersion": "2018-06-01",
    "properties": {
    "annotations": [],
    "type": "AzureSqlMI",
    "typeProperties": {
      "connectionString": {
          "type": "AzureKeyVaultSecret",
          "store": {
              "referenceName": "AKV",
              "type": "LinkedServiceReference"
          },
          "secretName": "[parameters('Audit_properties_typeProperties_connectionString_secretName')]"
      }
    },
    "connectVia": {
      "referenceName": "AutoResolveIntegrationRuntime",
      "type": "IntegrationRuntimeReference"
    }
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
    "[concat(variables('factoryId'), '/linkedServices/AKV')]"
    ]
    },
    

{
    "name": "[concat(parameters('factoryName'), '/EDW')]",
    "type": "Microsoft.DataFactory/factories/linkedServices",
    "apiVersion": "2018-06-01",
    "properties": {
    "annotations": [],
    "type": "AzureSqlMI",
    "typeProperties": {
      "connectionString": {
          "type": "AzureKeyVaultSecret",
          "store": {
              "referenceName": "AKV",
              "type": "LinkedServiceReference"
          },
          "secretName": "[parameters('EDW_properties_typeProperties_connectionString_secretName')]"
      }
    },
    "connectVia": {
      "referenceName": "AutoResolveIntegrationRuntime",
      "type": "IntegrationRuntimeReference"
    }
    },
    "dependsOn": [
    
    "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
    "[concat(variables('factoryId'), '/linkedServices/AKV')]"
    ]
    },
    
    {
        "name": "[concat(parameters('factoryName'), '/lnk_AzSqlMi_Current_Instec_Policy')]",
        "type": "Microsoft.DataFactory/factories/linkedServices",
        "apiVersion": "2018-06-01",
        "properties": {
        "annotations": [],
        "type": "AzureSqlMI",
        "typeProperties": {
        "connectionString": {
        "type": "AzureKeyVaultSecret",
        "store": {
        "referenceName": "AKV",
        "type": "LinkedServiceReference"
        },
        "secretName": "[parameters('lnk_AzSqlMi_Current_Instec_Policy_properties_typeProperties_connectionString_secretName')]"
        }
        },
        "connectVia": {
        "referenceName": "AutoResolveIntegrationRuntime",
        "type": "IntegrationRuntimeReference"
        }
        },
        "dependsOn": [
        
        "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
        "[concat(variables('factoryId'), '/linkedServices/AKV')]"
        ]
        },
        {
        "name": "[concat(parameters('factoryName'), '/lnk_AzSqlMi_Current_Insurity_Claim')]",
        "type": "Microsoft.DataFactory/factories/linkedServices",
        "apiVersion": "2018-06-01",
        "properties": {
        "annotations": [],
        "type": "AzureSqlMI",
        "typeProperties": {
        "connectionString": {
        "type": "AzureKeyVaultSecret",
        "store": {
        "referenceName": "AKV",
        "type": "LinkedServiceReference"
        },
        "secretName": "[parameters('lnk_AzSqlMi_Current_Insurity_Claim_properties_typeProperties_connectionString_secretName')]"
        }
        },
        "connectVia": {
        "referenceName": "AutoResolveIntegrationRuntime",
        "type": "IntegrationRuntimeReference"
        }
        },
        "dependsOn": [
        
        "[concat(variables('factoryId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
        "[concat(variables('factoryId'), '/linkedServices/AKV')]"
        ]
        }, 
        {
            "name": "[concat(parameters('factoryName'), '/AKV')]",
            "type": "Microsoft.DataFactory/factories/linkedServices",
            "apiVersion": "2018-06-01",
            "properties": {
            "annotations": [],
            "type": "AzureKeyVault",
            "typeProperties": {
            "baseUrl": "[parameters('AKV_properties_typeProperties_baseUrl')]"
            }
            },
            "dependsOn": []
            },   
{
    "name": "[concat(parameters('factoryName'), '/AutoResolveIntegrationRuntime')]",
    "type": "Microsoft.DataFactory/factories/integrationRuntimes",
    "apiVersion": "2018-06-01",
    "properties": {
    "type": "Managed",
    "typeProperties": {
      "computeProperties": {
          "location": "AutoResolve",
          "dataFlowProperties": {
              "computeType": "General",
              "coreCount": 8,
              "timeToLive": 0
          }
      }
    }
    },
    "dependsOn": []
    }


]
}