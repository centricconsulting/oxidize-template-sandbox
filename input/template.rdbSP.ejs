@@@FILE:[test/databasifySP.sql]@@@
<% // javascript

const codifyOptions = codifier.DatabaseCodifyOptions
const databaseOptions = databasifier.SqlServerDatabaseOptions
const dbJson = databasifier.getDatabaseJson(project, codifyOptions, databaseOptions)

dbJson.tables.forEach(table => {

  const tableName = codifier.codifyText(
      table.domain ? table.domain.concat("_", table.name) : table.name,
      codifyOptions
    )
  const bitemporal = (table.bitemporal === "true")
  const transition = (table.transition === "true")

  const pkColumName = tableName.concat("_", databaseOptions.primaryKeyDescriptor)
  const nkColumName = tableName.concat("_", databaseOptions.naturalKeyDescriptor)

%>
/* ################### Strting New Code for Stored Procedure ################## */

CREATE OR ALTER PROCEDURE usp_Instec_<%- tableName %> (@START_DATE datetime , @END_DATE datetime) AS

--BEGIN Cast Block
DECLARE @AlLChars VARCHAR(100) = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
/*DO NOT  EDIT THIS CODE.*/

--BEGIN Cast Block

SELECT 
 CAST(<%- nkColumName %> +'#Instec' AS VARCHAR(200)) AS <%- nkColumName %>,
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- "CAST([".concat(column.name)
%><%- "] AS ".concat(column.dataType) 
%><%- ") AS [".concat(column.name)
%>]<%- column.required ? " " : null %>
<% // javascript
  
}) 

  const pkColumns = table.columns.filter(c => c.primary === true).map(c => c.name) ?? []
  const grainColumns = table.columns.filter(c => c.grain === true && !(c.primary === true)).map(c => c.name) ?? []

%>,CAST(BUSINESS_EFFECTIVE_BEGIN_DATETIME AS DATETIME2(3)) AS BUSINESS_EFFECTIVE_BEGIN_DATETIME
,CAST(BUSINESS_EFFECTIVE_END_DATETIME AS DATETIME2(3)) AS BUSINESS_EFFECTIVE_END_DATETIME
,CAST(RECORD_VALID_BEGIN_DATETIME AS DATETIME2(3)) AS RECORD_VALID_BEGIN_DATETIME
,CAST(RECORD_VALID_END_DATETIME AS DATETIME2(3)) AS RECORD_VALID_END_DATETIME
,CAST(ENTERED_DATETIME AS DATETIME2(3)) AS ENTERED_DATETIME
,CAST(UPDATED_DATETIME AS DATETIME2(3)) AS UPDATED_DATETIME
,CAST(BATCH_ID AS INT) AS BATCH_ID
,CAST(INVALIDATED_BATCH_ID AS VARCHAR(200)) AS INVALIDATED_BATCH_ID
,CAST(INTRA_BATCH_LOOP_SEQUENCE AS INT) AS INTRA_BATCH_LOOP_SEQUENCE
,CAST(GENERATED_RECORD_IND AS INT) AS GENERATED_RECORD_IND
,CAST(CHANGE_HASH AS BINARY(32)) AS CHANGE_HASH
,CAST(SOURCE_SYSTEM_CODE AS VARCHAR(100)) AS SOURCE_SYSTEM_CODE
FROM(
--END Cast Block

/* EDIT YOUR SOURCE SQL QUERY HERE  */

--BEGIN Custom Block
SELECT
(CAST(CAST(RAND() * 1000 AS INT) AS VARCHAR(200))) AS <%- nkColumName %>,
<% // javascript

  applyColumnSort(table.columns) // see function at end of script
  table.columns.forEach((column, columnIndex) => {

%><%- columnIndex > 0 ? "," : " " 
%><%- "CAST(GETDATE()"
%><%- " AS ".concat(column.dataType) 
%><%- ") AS [".concat(column.name)
%>]<%- column.required ? " " : null %>
<% // javascript

}) 
%>,CAST(GETDATE() AS VARCHAR(100)) AS BUSINESS_EFFECTIVE_BEGIN_DATETIME
,CAST(GETDATE() AS VARCHAR(100)) AS BUSINESS_EFFECTIVE_END_DATETIME
,CAST(GETDATE() AS VARCHAR(100)) AS RECORD_VALID_BEGIN_DATETIME
,CAST(GETDATE() AS VARCHAR(100)) AS RECORD_VALID_END_DATETIME
,CAST(GETDATE() AS VARCHAR(100)) AS ENTERED_DATETIME
,CAST(GETDATE() AS VARCHAR(100)) AS UPDATED_DATETIME
,(CAST(CAST(RAND() * 1000 AS INT) AS VARCHAR(100))) AS BATCH_ID
,(CAST(CAST(RAND() * 1000 AS INT) AS VARCHAR(100))) AS INVALIDATED_BATCH_ID
,(CAST(CAST(RAND() * 1000 AS INT) AS VARCHAR(100))) AS INTRA_BATCH_LOOP_SEQUENCE
,(CAST(CAST(RAND() * 1000 AS INT) AS VARCHAR(100))) AS GENERATED_RECORD_IND
,0X1234 AS CHANGE_HASH
,(CAST(RIGHT( LEFT(@ALLCHARS,ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) + RIGHT( LEFT(@ALLCHARS,ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) +RIGHT( LEFT(@ALLCHARS,ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) + RIGHT( LEFT(@ALLCHARS,ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) + RIGHT( LEFT(@ALLCHARS,ABS(BINARY_CHECKSUM(NEWID())%35) + 1 ),1) AS VARCHAR(10))) AS SOURCE_SYSTEM_CODE
--END Custom Block

--BEGIN Close Block
) MyTable

--END Close Block
GO
<% // javascript
  if(grainColumns.length > 0) {
%>
<% // javascript
  }
})

function applyColumnSort(columns) {
  columns.sort((a, b) => {
    let sortValue
    // 1. primary
    sortValue = (b.primary === true ? 1 : 0)- (a.primary === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 2. grain
    sortValue = (b.grain === true ? 1 : 0) - (a.grain === true ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 3. fks
    sortValue = (!!b.attributeClass?.entityId ? 1 : 0) - (!!a.attributeClass?.entityId ? 1 : 0)
    if(sortValue !== 0) return sortValue

    // 4. alpha
    return a.name.localeCompare(b.name)
  })

}
%>